@inject Microsoft.Extensions.Configuration.IConfiguration configuration
@using System.Threading.Tasks
@using MeasureThat.Net.Logic.Web
@using MeasureThat.Net.Models
@using Microsoft.AspNetCore.Identity
@model MeasureThat.Net.Models.NewBenchmarkModel
@inject SignInManager<ApplicationUser> SignInManager

@{
    string action = Model.Id == 0 ? "Add new" : "Edit";
    string verb = Model.Id == 0 ? "Create" : "Edit";
}

@{
    ViewData["Title"] = verb + " benchmark";
    ViewData["ReturnUrl"] = Url.Action("Add");
}

<div class="page-header">
    <h1>@verb benchmark</h1>
</div>

@if (!SignInManager.IsSignedIn(User))
{
    <div class="alert alert-warning" role="alert">
        <b>Consider signing in before you create benchmark.</b> Then you will be able to edit it later.
        Benchmarks created by guest users <b>can't be edited</b>, only forked.
        <br><br>
        <button class="btn btn-primary" data-toggle="modal" data-target="#authenticateModal">Log in</button>
    </div>
    <hr/>
}

@using (Html.BeginForm(action, "Benchmarks", null, FormMethod.Post, true, new { id = "new-benchmark-form" }))
{
    @Html.ValidationSummary()

    @Html.AntiForgeryToken()

    @Html.HiddenFor(m => m.Id)

    <div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
        <div class="panel panel-default">
            <div class="panel-heading" role="tab" id="headingOne">
                <h4 class="panel-title">
                    <a role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                        Benchmark name and description
                    </a>
                </h4>
            </div>
            <div id="collapseOne" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingOne">
                <div class="panel-body">
                    <div class="form-group">
                        @Html.LabelFor(m => m.BenchmarkName)
                        @Html.TextBoxFor(m => m.BenchmarkName, new { @class = "form-control", placeholder = "Name of the benchmark" })
                        @Html.ValidationMessageFor(m => m.BenchmarkName, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Description)
                        @Html.TextAreaFor(m => m.Description, new { @class = "form-control", placeholder = "Benchmark description" })
                        @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-heading" role="tab" id="headingTwo">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
                        Preparation code
                    </a>
                </h4>
            </div>
            <div id="collapseTwo" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingTwo">
                <div class="panel-body">
                    <div class="form-group">
                        @Html.LabelFor(m => m.HtmlPreparationCode)
                        @Html.TextAreaFor(m => m.HtmlPreparationCode, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.HtmlPreparationCode, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.ScriptPreparationCode)
                        @Html.TextAreaFor(m => m.ScriptPreparationCode, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.ScriptPreparationCode, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-heading" role="tab" id="headingThree">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseThree" aria-expanded="true" aria-controls="collapseThree">
                        Test cases
                    </a>
                </h4>
            </div>
            <div id="collapseThree" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingThree">
                <ul class="list-group" id="test-case-list"></ul>
                <div class="panel-footer">
                    @Html.ValidationMessage("TestCases", "", new { @class = "text-danger" })
                    <div class="form-group">
                        <input type="button" class="btn btn-default" data-action="new-test" value="Add test case" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="g-recaptcha" data-sitekey="@(configuration["ReCaptcha:SiteKey"])"></div>
        @Html.ValidationMessage(ValidateReCaptchaAttribute.ReCaptchaModelErrorKey, "", new { @class = "text-danger" })
    </div>

    <input type="submit" class="btn btn-default" value="Submit" />
    <a href="@Url.Action("Latest")" class="btn btn-link">Cancel</a>
    <!--<input type="button" class="btn btn-info" id="test-button" value="Test before submit" />-->
}

<div class="hidden">
    @if (Model.TestCases != null && Model.TestCases.Any())
    {
        foreach (var testCase in Model.TestCases)
        {
            // So tests that user already added not get lost
            <textarea data-content="existing-test" data-test-name="@testCase.TestCaseName">@testCase.BenchmarkCode</textarea>
        }
    }
</div>

@section Styles{
    @{await Html.RenderPartialAsync("_CodeMirrorStyles");}
}

@section Scripts {
    @{await Html.RenderPartialAsync("_CodeMirrorScripts");}

    <script src='https://www.google.com/recaptcha/api.js'></script>

    <environment names="Development">
        <script src="~/lib/mustache/mustache.js" asp-append-version="true"></script>
    </environment>
    <environment names="Staging,Production">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/2.1.3/mustache.min.js"></script>
    </environment>

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}


<script id="testCase" type="x-tmpl-mustache">
    <li class="list-group-item">
        <div class="form-group">
            <label for="TestCases.TestCaseName">Name your test:</label>
            <input type="text" class="form-control" placeholder="Name of the test case" data-val="true" data-val-regex="The field Test Case must match the regular expression '[a-zA-Z0-9.`~!@@#$%^&amp;*()]'." data-val-regex-pattern="[a-zA-Z0-9.`~!@@#$%^&amp;*()]" data-val-required="The Test Case field is required." name="TestCases[{{testCaseId}}].TestCaseName" value="{{testCaseName}}">

            <label for="TestCases.BenchmarkCode">Benchmark code</label>
            <textarea class="form-control" data-val="true" placeholder="Benchmark code" data-val-required="The Benchmark code is required." name="TestCases[{{testCaseId}}].BenchmarkCode">{{textCaseContent}}</textarea>
            <span class="field-validation-valid text-danger" data-valmsg-for="TestCases.BenchmarkCode" data-valmsg-replace="true"></span>
        </div>
        <div class="form-group text-right">
            <button data-action="delete-test" class="btn btn-default">Delete test case</button>
        </div>
    </li>
</script>

<script type="text/javascript">
    var globalTestCaseCounter = 0;
    function deleteTest() {
        $(this.parentNode.parentNode).remove();
        return false;
    }

    function makeNewTestCase(strTestCaseContent, strTestCaseName) {
        if (!strTestCaseContent) {
            strTestCaseContent = '';
        }

        if (!strTestCaseName) {
            strTestCaseName = '';
        }

        var template = $('#testCase').html();
        Mustache.parse(template);   // optional, speeds up future uses
        var rendered = Mustache.render(template, { textCaseContent: strTestCaseContent, testCaseName: strTestCaseName, testCaseId: globalTestCaseCounter++ });
        var newTestCase = $(rendered);
        $("#test-case-list").append(newTestCase);
        var editor = newTestCase.find("textarea");
        var ed = CodeMirror.fromTextArea(editor[0], {
            lineNumbers: true,
            mode: 'javascript',
            value: '\n\n\n'
        });
        ed.on("blur", function (instance) {
            instance.save();
        });

        newTestCase.find("[data-action='delete-test']").click(deleteTest);
    }

    $(document).ready(function () {
        var editor = CodeMirror.fromTextArea(document.getElementById("HtmlPreparationCode"), {
            lineNumbers: true,
            mode: 'xml',
            value: '\n\n\n'
        });
        editor.on("blur", function (instance) {
            instance.save();
        });

        editor = CodeMirror.fromTextArea(document.getElementById("ScriptPreparationCode"), {
            lineNumbers: true,
            mode: 'javascript'
            /*value: ' \n \n \n',
            lineWrapping: true,
            gutter: true*/
        });
        editor.on("blur", function (instance) {
            instance.save();
        });
        //editor.setValue(' \n \n \n');

        $("[data-action='new-test']").on("click", function () { makeNewTestCase('', ''); });

        // Preserve tests previously entered by user
        $("[data-content='existing-test']").each(function (idx, el) {
            makeNewTestCase(el.textContent, $(el).attr("data-test-name"));
        });

        // Test before submit handler
        $("#test-button").click(function () {
            $("#test-button").attr("disabled", "disabled");
            $("#test-placeholder").empty();
            $("#test-progress").show();
            $('#test-before-submit-modal').modal();

            var url = "/Benchmarks/TestBeforeSubmit";
            var form = $("#new-benchmark-form");
            $.ajax({
                type: "POST",
                url: url,
                cache: false,
                data: form.serialize(), // serializes the form's elements.
                success: function (data) {
                    $("#test-button").removeAttr("disabled", "disabled");
                    $("#test-progress").hide();
                    $("#test-placeholder").html(data);
                }
            });
        });
    });

</script>
}


<div class="modal fade" id="test-before-submit-modal" tabindex="-1" role="dialog" aria-labelledby="authenticateModal-label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="authenticateModal-label">Sending data to server</h4>
            </div>
            <div class="modal-body" style="text-align: center">
                <div id="test-placeholder"></div>
                <div id="test-progress">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%">
                            <span class="sr-only">100% Complete</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
