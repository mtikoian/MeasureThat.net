@inject Microsoft.Extensions.Configuration.IConfiguration configuration
@using BenchmarkLab.Logic.Web
@model NewBenchmarkModel

@{
    ViewData["Title"] = "Create new benchmark";
}

<div class="page-header">
    <h1>Create new benchmark</h1>
</div>

@using (Html.BeginForm("Add", "Benchmarks", FormMethod.Post))
{
    //@Html.ValidationSummary();

    @Html.AntiForgeryToken()

    <div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
        <div class="panel panel-default">
            <div class="panel-heading" role="tab" id="headingOne">
                <h4 class="panel-title">
                    <a role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                        Benchmark name and description
                    </a>
                </h4>
            </div>
            <div id="collapseOne" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingOne">
                <div class="panel-body">
                    <div class="form-group">
                        @Html.LabelFor(m => m.BenchmarkName)
                        @Html.TextBoxFor(m => m.BenchmarkName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.BenchmarkName, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Description)
                        @Html.TextAreaFor(m => m.Description, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-heading" role="tab" id="headingTwo">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
                        Preparation code
                    </a>
                </h4>
            </div>
            <div id="collapseTwo" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingTwo">
                <div class="panel-body">
                    <div class="form-group">
                        @Html.LabelFor(m => m.HtmlPreparationCode)
                        @Html.TextAreaFor(m => m.HtmlPreparationCode, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.HtmlPreparationCode, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.ScriptPreparationCode)
                        @Html.TextAreaFor(m => m.ScriptPreparationCode, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.ScriptPreparationCode, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-heading" role="tab" id="headingThree">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseThree" aria-expanded="true" aria-controls="collapseThree">
                        Test cases
                    </a>
                </h4>
            </div>
            <div id="collapseThree" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingThree">
                <div class="panel-body" id="test-case-list">
                    
                </div>
                <div class="panel-footer">
                    @Html.ValidationMessage("TestCases", "", new { @class = "text-danger" })
                    <div class="form-group">
                        <input type="button" class="btn btn-default" data-action="new-test" value="Add test case" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="g-recaptcha" data-sitekey="@(configuration["ReCaptcha:SiteKey"])"></div>
        @Html.ValidationMessage(ValidateReCaptchaAttribute.ReCaptchaModelErrorKey, "", new { @class = "text-danger" })
    </div>

    <input type="submit" class="btn btn-default" value="Submit" />
    <input type="button" class="btn btn-info" value="Test before submit" />
}

@Html.EditorFor(m => m.TestCases[0].TestCaseName)

<div class="hidden">
@if (Model.TestCases != null && Model.TestCases.Count() > 0)
{
@foreach (var testCase in Model.TestCases)
{
// So tests that user already added not get lost
<textarea data-content="existing-test" data-test-name="@testCase.TestCaseName">@testCase.BenchmarkCode</textarea>
}
}
</div>

@section Styles{
@{await Html.RenderPartialAsync("_CodeMirrorStyles");}
}

@section Scripts {
    @{await Html.RenderPartialAsync("_CodeMirrorScripts");}

    <script src='https://www.google.com/recaptcha/api.js'></script>

    <environment names="Development">
        <script src="~/lib/mustache/mustache.js" asp-append-version="true"></script>
    </environment>
    <environment names="Staging,Production">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/2.1.3/mustache.min.js"></script>
    </environment>

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}


<script id="testCase" type="x-tmpl-mustache">
    <div class="form-group">
        <label for="TestCases.TestCaseName">Name your test:</label>
        <input type="text" class="form-control" data-val="true" data-val-regex="The field Test Case must match the regular expression '[a-zA-Z0-9.`~!@@#$%^&amp;*()]'." data-val-regex-pattern="[a-zA-Z0-9.`~!@@#$%^&amp;*()]" data-val-required="The Test Case field is required." name="TestCases[{{testCaseId}}].TestCaseName" value="{{testCaseName}}">

        <label for="TestCases.BenchmarkCode">Benchmark code</label>
        <textarea class="form-control" data-val="true" data-val-required="The Benchmark code is required." name="TestCases[{{testCaseId}}].BenchmarkCode">{{textCaseContent}}</textarea>
        <span class="field-validation-valid text-danger" data-valmsg-for="TestCases.BenchmarkCode" data-valmsg-replace="true"></span>
        <button data-action="delete-test" class="btn btn-default">Delete</button>
    </div>
</script>

    <script type="text/javascript">
        var globalTestCaseCounter = 0;
        function deleteTest() {
            $(this.parentNode).remove();
            return false;
        }

        function makeNewTestCase(strTestCaseContent, strTestCaseName) {
            if (!strTestCaseContent) {
                strTestCaseContent = '';
            }

            if (!strTestCaseName) {
                strTestCaseName = '';
            }

            var template = $('#testCase').html();
            Mustache.parse(template);   // optional, speeds up future uses
            var rendered = Mustache.render(template, { textCaseContent: strTestCaseContent, testCaseName: strTestCaseName, testCaseId: globalTestCaseCounter++ });
            var newTestCase = $(rendered);
            $("#test-case-list").append(newTestCase);
            var editor = newTestCase.find("textarea");
            var testCaseEditor = CodeMirror.fromTextArea(editor[0], {
                lineNumbers: true,
                mode: 'javascript'
            });

            newTestCase.find("[data-action='delete-test']").click(deleteTest);
        }        

        $(document).ready(function () {
            var htmlPreparationEditor = CodeMirror.fromTextArea(document.getElementById("HtmlPreparationCode"), {
                lineNumbers: true,
                mode: 'xml'
            });

            var scriptPreparationEditor = CodeMirror.fromTextArea(document.getElementById("ScriptPreparationCode"), {
                lineNumbers: true,
                mode: 'javascript'
            });

            $("[data-action='new-test']").on("click", function () { makeNewTestCase('', ''); });

            $("[data-content='existing-test']").each(function (idx, el) {
                makeNewTestCase(el.textContent, $(el).attr("data-test-name"));
            });
        });
        
    </script>
}
