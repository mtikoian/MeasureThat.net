@model NewBenchmarkModel

@{
    ViewData["Title"] = "Run the benchmark: " + Model.BenchmarkName;
}

<div class="page-header">
    <h2>Run the benchmark: <small>@Model.BenchmarkName</small></h2>
    <h3>@Model.Description</h3>
</div>

<div class="panel panel-primary">
    @{
        bool hasHtmlPreparationCode = !string.IsNullOrWhiteSpace(Model.HtmlPreparationCode);
        bool hasScriptPreparationCode = !string.IsNullOrWhiteSpace(Model.ScriptPreparationCode);
        string messageHtml = !hasHtmlPreparationCode ? "<Not specified>" : string.Empty;
        string messageScript = !hasScriptPreparationCode ? "<Not specified>" : string.Empty;
    }
    <div class="panel-heading"><b>HTML Preparation code:</b> @messageHtml</div>
    @if (hasHtmlPreparationCode)
    {
        <div class="panel-body">
            <textarea class="form-control" readonly data-code="html">@Model.HtmlPreparationCode</textarea>
        </div>

        <ul class="list-group">
            <li class="list-group-item">@Html.Raw(Model.HtmlPreparationCode)</li>
        </ul>
    }
</div>

<div class="panel panel-default">
    <div class="panel-heading"><b>Script Preparation code: </b> @messageScript</div>
@if (hasScriptPreparationCode)
{
    <div class="panel-body">
        <textarea class="form-control" readonly data-code="javascript">@Model.ScriptPreparationCode</textarea>
    </div>
}
</div>

<div class="panel panel-default">
    <div class="panel-heading"><b>Tests</b>: (@Model.TestCases.Count())</div>

    <ul class="list-group">
        @foreach (var test in Model.TestCases)
        {
            <li class="list-group-item">
                <h3>@test.TestCaseName</h3>
                <textarea class="form-control" readonly data-code="javascript">@test.BenchmarkCode</textarea>
            </li>
        }
    </ul>
</div>

<div class="form-group">
    <button class="btn btn-default" id="runTest">Run tests</button>
</div>

<div id="result">
    <div class="panel panel-info">
        <div class="panel-heading"><b>Results</b></div>
        <div class="panel-body">
            <h4><b>Suite status:</b> <span class="label label-primary" data-role="suite-status">&lt;idle&gt;</span></h4>
        </div>
        
        <ul class="list-group">
            <li class="list-group-item">
                <table class="table table-striped table-bordered table-hover">
                    <tr>
                        <th>Test case name</th>
                        <th>Status</th>
                    </tr>

                    @foreach (var test in Model.TestCases)
                    {
                        <tr data-row-for="@test.TestCaseName">
                            <td>@test.TestCaseName</td>
                            <td data-role="status-label">&lt;idle&gt;</td>
                        </tr>
                    }
                </table>
            </li>
        </ul>
    </div>
</div>

@section Styles{
    @{await Html.RenderPartialAsync("_CodeMirrorStyles");}
}

@section Scripts {
    <environment names="Development">
        <script src="~/lib/lodash/dist/lodash.js"></script>
        <script src="~/lib/platform/platform.js"></script>
        <script src="~/lib/benchmark/benchmark.js"></script>
        <script src="~/scripts/benchmarklab.js" asp-append-version="true"></script>
    </environment>
    <environment names="Staging,Production">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/platform/1.3.1/platform.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.13.1/lodash.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/benchmark/2.1.0/benchmark.min.js"></script>
    </environment>

@{await Html.RenderPartialAsync("_CodeMirrorScripts");}

<script type="text/javascript">
    function runTests() {
        var preparation = $("#jspreparation").html();
        var content = $("#benchmark").html();
        try {
            eval(preparation);
            eval(content);
        } catch (e) {
            alert("Error:" + JSON.stringify(e));
            throw e;
        }
    };

    function createEditors() {
        // Will enable codeMirror
        $("[data-code='html']")
            .each(function(index) {
                var editor = CodeMirror.fromTextArea(this,
                {
                    lineNumbers: true,
                    mode: 'xml',
                    readOnly: true,
                    viewportMargin: Infinity
                });
            });

        $("[data-code='javascript']")
            .each(function(index) {
                var editor = CodeMirror.fromTextArea(this,
                {
                    lineNumbers: true,
                    mode: 'javascript',
                    readOnly: true,
                    viewportMargin: Infinity
                });
            });
    }

    $(document)
        .ready(function() {
            $("#runTest").click(runTests);
            createEditors();
        });
</script>


<script type="text/template" id="jspreparation">
    @Html.Raw(Model.ScriptPreparationCode) 
</script>

<script type="text/javascript">
    function onStart() {
        var suiteStatusLabels = $("[data-role='suite-status']");
        suiteStatusLabels.text('Running');
        suiteStatusLabels.attr("class", "label label-info");
    }

    function onCycle() {
        debugger;
    }

    function onAbort() {
        var suiteStatusLabels = $("[data-role='suite-status']");
        suiteStatusLabels.text('Aborted');
        suiteStatusLabels.attr("class","label label-warning");
        //debugger;
    }

    function onError() {
        // TODO: report error properly
        var suiteStatusLabels = $("[data-role='suite-status']");
        suiteStatusLabels.text('Error');
        suiteStatusLabels.attr("class", "label label-danger");
        debugger;
    }

    function onReset() {
        var suiteStatusLabels = $("[data-role='suite-status']");
        suiteStatusLabels.text('Reset');
        suiteStatusLabels.attr("class", "label label-warning");
        debugger;
    }

    function onComplete() {
        var suiteStatusLabels = $("[data-role='suite-status']");
        suiteStatusLabels.text('Completed');
        suiteStatusLabels.attr("class", "label label-success");
        debugger;
    }

</script>
<script type="text/template" id="benchmark">
    var suite = new Benchmark.Suite;
    @foreach (var test in Model.TestCases)
    {
        @: suite.add('@test.TestCaseName', function() {
            @Html.Raw(test.BenchmarkCode);
        @: });
    }    
    suite.on('start', onStart);
    suite.on('cycle', onCycle);
    suite.on('abort', onAbort);
    suite.on('error', onError);
    suite.on('reset', onReset);
    suite.on('complete', onComplete);
    // run async
    suite.run({ 'async': true });
</script>
}
